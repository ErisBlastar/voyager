<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3b2/docbookx.dtd">
<chapter id="dov.overview">

  <title>A Short Overview of Voyager</title>

  <para>This chapter will give you a short overview about Voyager. We 
  will not go into many technical details because those are covered in 
  the corresponding chapters.</para>

  <section id="dov.overview.tvp">

    <title>The Voyager Project</title>

    <para>Before we talk about the different parts of Voyager we want 
    to explain how Voyager started of. Voyager is the result of a lot 
    of ideas we had the past years so we would like to explain how we 
    got there.</para>

    <section id="dov.overview.tvp.h">

      <title>History</title>

      <para>Shortly after OS/2 Warp 3 IBM started working on a new 
      project, with the goal to move the kernel to a microkernel 
      architecture and thus make it more portable. They started to 
      implement an OS/2 personality on top of a Mach 3 Kernel and they 
      called the project <emphasis>OS/2 Warp (PowerPC 
      Edition)</emphasis>. For various reasons the project got 
      cancelled later but before that happened, IBM released the book 
      <citetitle>OS/2 Warp (PowerPC Edition) A First Look</citetitle> 
      <citation>SG24-4630</citation>, which documented the basic design 
      of it.</para>

      <para>In 1996 IBM released the last real release of OS/2 with 
      significant changes, named OS/2 Warp 4. They back-ported some of 
      the things designed for the PowerPC version like GRADD 
      <citation>SG24-4639</citation> to the <quote>old</quote> OS/2 
      kernel, but the microkernel project itself was dead. After Warp 4 
      IBM just released some updated releases for servers, the end-user 
      market was already dead inside IBM at this time. The only part 
      that still got extended was the OS/2 Kernel, development on that 
      stopped end of 2005.</para>

      <tip>

        <para>A more detailed history of OS/2 is available in the 
        Internet. Michal Necasek did a very detailed overview of the 
        different releases. URL: 
        <ulink url="http://pages.prodigy.net/michaln/history/"/></para>

      </tip>

      <para>For several years people in the OS/2 community were 
      thinking about the mid-term options we had to work with our 
      beloved operating system. Most of the ideas were focusing on 
      rewriting large parts of OS/2, with the goal to have an open 
      source clone of OS/2. Projects like OSFree started but they 
      haven&apos;t reached much attention so far and there is not much 
      outcome by the time writing.</para>

      <para>Bigger projects like netlabs.org never actively joined or 
      supported those projects for various reasons. Most programmers at 
      netlabs.org think that there is not enough manpower to finish a 
      project like OSFree. Beside this most programmers are already 
      fully occupied with other projects and we did not see many new 
      people joining the community. It is also a fact that the design 
      of OS/2 in general (with some notable exceptions) is no longer 
      state of the art. Back then, IBM addressed that with the 
      microkernel concept but as mentioned before it was neither 
      released nor finished.</para>

      <para>With or without IBM, there always was a hard core of 
      programmers and users using and enhancing OS/2. With Warpstock 
      USA 1996 OS/2 users started to meet each other once a year, three 
      year later the European community started to do that as well, 
      followed by East-European users a few years later. At around the 
      same time netlabs.org got founded by Adrian Gschwend. The goal 
      was as simple as this: Create open source software for OS/2, 
      which was not that common yet back then. Meanwhile there is an 
      active core of developers and users gathered around netlabs.org 
      and its projects.</para>

      <para>When Apple released MacOS X in the late 90&apos;s, parts of 
      it were released as open source software, especially the kernel 
      and its tools. Beside the source code Apple also released a lot 
      of documentation about it, which made it easier for developers to 
      extend the OS. The MacOS X Kernel, called Darwin, is based on a 
      Mach 3 microkernel with a FreeBSD and MacOS X personality on top 
      of it. For that reason some people at netlabs.org started to get 
      interested in that project, because of the obvious relations to 
      the microkernel project of IBM.</para>

      <para>At the Developers Workshop 2005 in Dresden Adrian Gschwend 
      of netlabs.org presented the first thoughts about the perspective 
      of the OS/2 community. The presentation showed that, in mid-term, 
      the community will have to move on because we will not be able to 
      support OS/2 forever on recent hardware. Also, we cannot expect 
      any more enhancements from IBM. It was also shown that there are 
      things and concepts worth keeping in OS/2 which should be kept 
      for the future. Inspired by Darwin, the main statement from a 
      technical point of view was to create an OS/2 personality on top 
      of Darwin and implement PM and WPS on top of it.</para>

      <para>The presentation showed some interesting thoughts but it 
      missed the main point: It would not solve any of the issues we 
      nowadays have with PM or WPS because neither of them is available 
      in source code. During summer 2005 Bart Van Leeuwen and Adrian 
      Gschwend pushed the idea further which lead to a radical change 
      of the focus: One has to think about the desktop first and then 
      address the system underneath.</para>

      <para>In November 2005 the new conclusion was presented at 
      Warpstock Europe 2005. For the first time there were also 
      presentations of replacement parts for things like PM and core 
      components of the WPS like SOM. The focus was pretty clear: Use 
      as many existing technologies as possible and implement something 
      like a WPS on top of it and make sure we just write the minimum 
      needed to get there. There were also ideas presented about how 
      backward compatibility to OS/2 applications could be done. 
      Another important statement was that the kernel did not really 
      play an important role at that moment and that netlabs.org would 
      most probably not focus on that until more work had been done on 
      the desktop part.</para>

      <tip>

        <title>eComStation</title>

        <para>eComStation 1.2R is the currently available version of 
        this operating system. It is based on IBM personal computer 
        operating system technology and includes many UI enhancements, 
        a reorganisation of the desktop to reflect today&apos;s 
        Internet-centered computing world, additional networking 
        technology to allow connecting to the latest broadband Internet 
        connections such as Cable, ISDN, and xDSL, and the further 
        improved installation routine makes installing on both 
        cutting-edge and legacy hardware easier than ever.</para>

        <para>eComStation installs directly from CD on modern hardware 
        like AMD Athlon64 based computers, large IDE and SATA 
        harddrives and supports a host of network, sound, and video 
        cards out of the box</para>

        <para>For more info on availability, pricing and support 
        options please go to <ulink url="http://www.ecomstation.com/">
        http://www.ecomstation.com/</ulink></para>

      </tip>

      <para>A year after the first presentation of Voyager the next 
      Developers Workshop 2006 took place in April 2006 in Biel, 
      Switzerland. People like Chris Wohlgemuth, Peter Kocsis, and 
      Harald Studer presented first concepts and prototypes of core 
      components of Voyager, including an object model, a multimedia 
      subsystem, and an OpenGL based window manager. Adrian Gschwend 
      and Bart Van Leeuwen talked about the next steps the project has 
      to take and they also clearly showed that eComStation is the 
      current way to go for the mid-term future. There were also 
      students from the Berne University of Applied Sciences joining 
      the presentations who did not know OS/2 and its concepts at all. 
      It was great to see that those concepts are indeed unique and 
      that most students liked the idea of Voyager a lot and talked 
      about joining the project as soon as there are prototypes 
      available. This is an important step for community itself!</para>

      <para>The release of this book is hopefully the next milestone 
      for Voyager. As you can see it is far away from being complete 
      but we still think it is an important next step and we look 
      forward to contributions from all over the world.</para>

    </section>

    <section>

      <title>About the Codename</title>

      <para><quote>The Voyager Project</quote> so far is just a 
      codename for what we discuss in this book. It is a reference to 
      the <trademark>Star Trek</trademark> related history of codenames 
      used by IBM in OS/2 development. The codenames had already been 
      used for a long time at IBM but the marketing department decided 
      to use the codename <emphasis>Warp</emphasis> as a name for the 
      public as well with OS/2 Version 3.0 so it became <trademark>OS/2 
      Warp 3</trademark>.</para>

      <para>Voyager is also a reference to the NASA <emphasis>Voyager 
      1</emphasis> spacecraft ( 
      <ulink url="http://en.wikipedia.org/wiki/Voyager_1"/>), an 
      815-kilogram unmanned probe of the outer solar system and beyond, 
      launched September 5, 1977, and still operational, making it 
      NASA&apos;s longest-lasting mission. It visited Jupiter and 
      Saturn and was the first probe to provide detailed images of the 
      moons of these planets.</para>

      <para>Many programmers contributing to the project decided to 
      pick up related names as well, like Neptune, the eighth and 
      outermost planet of our solar system which got visited by the 
      Voyager 2 project and Triton, the biggest moon of Neptune.</para>

      <para>Most probably the name Voyager will not be used for the 
      project itself as soon as we got something ready for use.</para>

    </section>

  </section>

  <section>

    <title>The Story So Far</title>

    <para>So far most attempts to <quote>save</quote> OS/2 were to come 
    up with a group of people who started working on a kernel that has 
    an OS/2-like API (<filename>DOS*</filename>, <filename>
    MOU*</filename>, <filename>VIO*</filename>, <filename>
    KBD*</filename>, ...). There are some essential miss-concepts in 
    this thinking:</para>

    <itemizedlist>

      <listitem>

        <para>No user works with the kernel itself. The kernel is just 
        there to provide abstractions to the hardware. Users work with 
        applications and OS/2 users work a lot with the desktop as well 
        (The <firstterm>WPS</firstterm>).</para>

      </listitem>

      <listitem>

        <para>The OS/2 Kernel was ahead of its time in the early 90ies 
        but meanwhile even Microsoft has done its job and made the 
        Windows kernel much more stable than it used to be. There are 
        some things that are still great in the OS/2 kernel like a 
        stable API, a working ABI, and clearly separated parts which do 
        not mess with each other. The OS/2 kernel is history nowadays, 
        as porting to new hardware like 64 bit processors is impossible 
        to do.</para>

      </listitem>

      <listitem>

        <para>Even if the OS/2 API was stable and great one day, no one 
        will code like this anymore nowadays. PM programming will scare 
        away every student who grew up with Java or another high-level 
        language like C++ and (RAD) toolkits like wxWidgets, qt, and 
        GTK2. The OS/2 PM API is definitely dead and a big 
        <emphasis>don&apos;t</emphasis> for the future. There are 
        enough alternatives which can provide what OS/2 programmers 
        were used to work with (GPI/GDI for example).</para>

      </listitem>

      <listitem>

        <para>The OS/2 community lost way too much time in porting 
        drivers and software. Instead of focusing on real stuff like 
        WPS integration most time spent on projects is stupid and 
        boring porting work. This did not advance us further at all, 
        just a few things were done the OS/2 way.</para>

      </listitem>

    </itemizedlist>

    <para>Voyager tries to address those issues. In its first 
    incarnation, Voyager is not a complete replacement for OS/2 but it 
    starts to replace some important parts like the object model and 
    the multimedia subsystem. The further the project gets, the more 
    components can be replaced. The goal is to reach the point where we 
    have our own desktop which can run on any kernel that provides the 
    necessary APIs.</para>

  </section>

  <section>

    <title>Voyager Components</title>

    <para>So what are those components we talk about? While we can 
    define some parts pretty detailed it is not that easy for other 
    parts yet, simply because we need to do some more work first. We 
    talked about things like the WPS, that is what about most OS/2 
    users would define as the <quote>OS/2 feeling</quote>. And, 
    actually, it also is what we, the current developers of Voyager, 
    appreciate most about OS/2. So it was obvious that we would start 
    with an object model first—this is the base needed to implement a 
    WPS-like desktop. Another developer has a lot of know-how in the 
    multimedia field, so he started to work on a multimedia subsystem 
    replacement. We will show more than those two parts but you will 
    see that there is not much work done on that right now. The reason 
    is simple: We do not have any developers yet for those parts. We 
    hope that this will change soon, also because we release this book 
    to the public. Contributions are very welcome, please see <xref /> 
    to get an overview about how you can join the projects!</para>

    <section>

      <title>Voyager Object Model</title>

      <para>The WPS is a fully object-oriented desktop, instead of 
      <emphasis>everything is a file</emphasis> the credo is 
      <emphasis>everything is an object</emphasis>. This opens a whole 
      new way of interacting with the desktop for the user, but also 
      for the developer. We will not go into the details about the 
      object model itself in this introduction, a more detailed example 
      is covered in <xref linkend="dov.vom"/>. If you don&apos;t know 
      the WPS at all, you might want to download the eComStation Demo 
      CD, which is available for free at 
      <ulink url="http://www.ecomstation.com"/>.</para>

      <para>The object model of the WPS is called <firstterm>System 
      Object Model</firstterm> (SOM) and it introduced a new concept 
      that is just known in a few languages like Java: 
      Release-to-Release Binary Compatibility 
      <citation>Forman94</citation>. A developer can release binary 
      releases of objects and they will work between different releases 
      of the desktop, even if the subclassed object changes its 
      interface. Other systems like Gnome do not provide this, even a 
      minor release between 2.10 and 2.12 might break a plugin when the 
      interface changes. The developer would have to adjust his source 
      code to get it to work again.</para>

      <para>Neither SOM nor the Voyager Object Model restrict 
      developers to a specific programming language, one can use any 
      language as long as there are bindings to the object model 
      available. The development of the Voyager Object Model is done in 
      an object oriented fashion of C.</para>

      <para>The development of the new Voyager Object Model has been 
      done on OS/2 so far. However, the code is very portable and 
      should compile on other platforms as well.</para>

    </section>

    <section>

      <title>GUI Toolkit and Graphical Subsystem</title>

      <para>IBM provided two important things to the developer for 
      creating GUI based applications on OS/2: The 
      <firstterm>Presentation Manager</firstterm> (PM) and 
      <firstterm>GPI/GDI</firstterm> (Graphic Programming 
      Interface/Graphic Device Interface). The PM is responsible for 
      drawing common controls, window handling, input handling, and 
      more, while GPI/GDI provides a powerful matrix-based subsystem 
      which can be used to draw about everything one might need. 
      Applications like Maul Publisher on OS/2 show how powerful the 
      subsystem actually is.</para>

      <para>While being powerful, neither PM nor GPI/GDI or the 
      underlying GRADD architecture are available as open source. This 
      means they cannot be extended and we cannot fix known bugs in it. 
      So it was important to look for alternatives and it was clear 
      from the beginning that we would not rewrite something as complex 
      as GPI by ourself.</para>

      <para>Finding a replacement for PM was not that difficult: Almost 
      all big applications or toolkits on Unix-like systems like 
      OpenOffice.org, Mozilla, SWT, and wxWidgets are based on GTK+. 
      The second option would be the qt-toolkit which is also quite 
      popular among developers. The problem of the qt-toolkit is its 
      license: It is dual-licensed as GPL or a commercial license. GPL 
      actually forces the developer to release everything under the GPL 
      license as well, which is absolutely not the intention of 
      Voyager. GTK+ however is licensed under the LGPL license, which 
      does not have that strict restriction and does not force the 
      developer to release the source code of his application. That is, 
      for instance, also the reason why commercial products like 
      Acrobat Reader on Linux are using GTK+. GTK+ is also a very 
      modern and powerful toolkit which is well maintained. The only 
      drawback is its quite rudimentary documentation but unfortunately 
      this is a general problem of the many open source software and 
      toolkits available.</para>

      <para>Finding a replacement for GPI was tricky. For quite some 
      time we did not know what to choose as a replacement for that. 
      But in 2005 there was a newcomer in this area that received a lot 
      of attention: Cairo Graphics Library ( 
      <ulink url="http://www.cairographics.org"/>). Cairo basically 
      provides everything one might ask for as GPI programmer, like 
      FIXME. And developers start using it: The Mozilla foundation 
      announced that the Geko rendering engine would move its rendering 
      to Cairo, OpenOffice.org also wants to use it for its rendering, 
      and the GTK+ team moves a lot of drawing functions to Cairo as 
      well. So it looks like the perfect choice as a GPI replacement 
      and the first feedback from OS/2 developers who know GPI well 
      seems to prove that.</para>

      <para>While Cairo has already been ported to OS/2 we still work 
      on getting GTK+ to work as well. We hope to reach that point soon 
      with the support of Everblue (Xlib-Layer for OS/2: 
      <ulink url="http://everblue.netlabs.org"/>).</para>

    </section>

    <section>

      <title>Triton</title>

      <para>OS/2 introduced a modern multimedia subsystem in 1994. It 
      provided the abstraction of codecs and transports, which makes it 
      possible that even a media player from 1994 can play new codecs 
      like FLAC and Ogg Vorbis, simply because the system knows the 
      codec for it. Also, it does not matter if the stream is coming 
      from a local harddisk or if it is provided by an Internet radio 
      station using the HTTP protocol. Any application using this 
      interface can handle any protocol and codec supported by the 
      system, without the need to implement that for each one of them 
      separately.</para>

      <para>It was clear that we would like to provide something like 
      this for Voyager as well. By chance one of our developers, Peter 
      Cocsis, is skilled in this area and decided to implement a 
      similar concept from scratch. This is also necessary nowadays, 
      back when MMPM in OS/2 got designed no one talked about things 
      like HDTV, Satellite TV, and DivX, so it does have its 
      limitations for today&apos;s requirements.</para>

      <para>We think it is important that developers get a modern 
      multimedia subsystem right from the beginning, so we can 
      integrate the applications according to it and integrate them 
      even better into the desktop. More information about Triton can 
      be found in <xref linkend="dov.triton"/>.</para>

    </section>

    <section>

      <title>Neptune</title>

      <para>On Unix-like systems the desktop usually runs inside an 
      X-session, the most known implementation of that is called Xorg. 
      Xorg implements Xlib and provides an interface for graphics 
      device drivers. This interface can be binary-only and the two big 
      players nowadays, Nvidia and ATI, both provide just binary-only 
      drivers.</para>

      <para>Desktops like KDE, Gnome, and Xfce are no longer 
      implemented on Xlib itself, instead they use high-level toolkits 
      like GTK+ or qt. For historical reasons it seems to be impossible 
      right now to get rid of Xlib itself, which does not make sense 
      anymore because no (properly written) application nowadays is 
      using Xlib for drawing. This is all done by the toolkit itself. 
      On GTK+ this is now done using the Cairo Library, for instance. 
      qt is uses its own rendering engine called Arthur.</para>

      <para>Unfortunately there were no successful attempts so far to 
      get rid of Xlib completely, most of the time people argue that 
      one can still use the desktop remote like this. This is just true 
      for applications that are not using any direct rendering and 
      beside this, most users never use that feature anyway. But the 
      current trend on Unix-like systems finally goes into the 
      direction of using OpenGL-accelerated backends and doing the 
      whole rendering in it. This is exactly where Neptune comes 
      in.</para>

      <para>Neptune will provide a window manager for both Xlib and 
      Cario, where Cairo is using the Glitz backend for OpenGL 
      accelerated rendering. Unlike PM on OS/2, Xlib is not providing 
      any methods for window management so we need a 3rd party 
      application doing that and this is the job of so called window 
      managers.</para>

      <para>There are still many open questions for Neptune. We do not 
      have many developers working on that yet so this part will not be 
      finished anytime soon, contributions are again very welcome. More 
      information about the design of Neptune can be found in the 
      presentation of Harald Studer at Developers Workshop 2006 ( 
      <ulink url="ftp://ftp.netlabs.org/pub/events/dws06/presentations/AWMBasedOnCairo.pdf"/>
       ). The Neptune chapter in this book needs to be started 
      first.</para>

      <para>Note that Neptune is not critical for Voyager. Even if it 
      would be <emphasis>nice to have</emphasis>, Voyager can and will 
      run on a normal Xlib based Xorg with any window manager.</para>

    </section>

    <section>

      <title>Kernel</title>

      <para>Many OS/2 users adore the OS/2 kernel for various reasons. 
      It is pretty stable, it provides a stable ABI for device drivers, 
      the multitasking is still excellent, and it is fast. Most 
      probably it will be possible to work with this kernel for another 
      few years on recent hardware, but it will not go on like this 
      forever. Hardware and technology is changing and so do kernels. 
      The OS/2 kernel hasn&apos;t received any major enhancements since 
      around 1997, so it is time to think about an alternative.</para>

      <para>It is absolutely clear that whatever option might come up, 
      we will <emphasis>not</emphasis> write device drivers on our own 
      again. This was and is one of the major problems we had and none 
      of the core developers of Voyager wants to spend time on that 
      anymore.</para>

      <para>As you can see in <xref id="dov.kernel"/>, there are plenty 
      of options available nowadays and it would be a waste of time to 
      write yet another one by ourself. Voyager will compile on as many 
      kernels as possible, the team will abstract everything in a way 
      that the kernel is just one of the decisions we take.</para>

      <para>We would like to get to a point where we can release 
      Voyager as a complete OS/2 replacement one day. This means we 
      <emphasis>have</emphasis> to choose a kernel at that time but 
      before this happens we need to do a lot of research about the 
      best options. So far the development of Voyager is done on OS/2 
      only so we do not need to hurry.</para>

    </section>

  </section>

  <section>

    <title>Source Code License</title>

    <para>Voyager is open source software. This means everything which 
    belongs to the core of Voyager is available in source code and thus 
    everyone can have a look at the implementation and, even better, 
    improve and extend it.</para>

    <para>There are plenty of open source licenses available and the 
    Voyager core team has discussed which one we should choose for 
    Voyager for quite some time. Our requirements were:</para>

    <itemizedlist>

      <listitem>

        <para>The source code of the core of Voyager must be available 
        to the public.</para>

      </listitem>

      <listitem>

        <para>It must be possible for anyone to enhance and extend the 
        source code of the Voyager core.</para>

      </listitem>

      <listitem>

        <para>It must be possible to create a commercial product out of 
        Voyager that can be sold.</para>

      </listitem>

      <listitem>

        <para>Because of the binary compatible object model, it must be 
        possible to provide binary-only extensions to classes and 
        objects, both open source and closed source, commercial or 
        non-commercial.</para>

      </listitem>

      <listitem>

        <para>We want to provide templates and code samples that can be 
        used by developers as a base, for open source and for closed 
        source applications.</para>

      </listitem>

    </itemizedlist>

    <para>This already made one thing pretty clear: The license cannot 
    be the GNU General Public License (GPL). The GPL prohibits the use 
    of binary-only components, as we can see very well in the endless 
    discussions in the Linux kernel mailing-list. And what is a binary 
    object model for when we cannot use its advantage because of the 
    license? So we had to discuss different licenses and after some 
    discussions we came up with the following license model:</para>

    <itemizedlist>

      <listitem>

        <para>The core of Voyager is dual-licensed under the CDDL and 
        the LGPL.</para>

      </listitem>

      <listitem>

        <para>All sample applications and code templates are licensed 
        under the Apache License.</para>

      </listitem>

    </itemizedlist>

    <para>We decided to use a dual-licensing of the core to avoid 
    endless discussions with those programmers who think the GPL solves 
    every problem. It will most probably not make everyone happy but 
    the LGPL is the only logical way for our requirements in that case. 
    The CDDL gives more freedom to us because we as developers can also 
    sell our product like this, but if someone changes source code of 
    us they would have to at least release the changes in our 
    classes.</para>

    <para>The Apache License for sample applications and code templates 
    also makes sense. It should be easy for new programmers and 
    companies to code for Voyager. There are almost no restrictions in 
    the Apache license so we do not force any code release at all like 
    this.</para>

    <para>For sure we hope that many programmers release their classes, 
    objects, and applications as open source software. In best case 
    under the same license as we do. But we also think that a project 
    like Voyager can just get its full potential when we open up the 
    market for commercial companies and programmers as well—and most 
    open source desktops nowadays do not provide that freedom.</para>

    <para />

    <para />

  </section>

  <para />

</chapter>

