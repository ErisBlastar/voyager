<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3b2/docbookx.dtd">
<chapter id="dov.vd">

  <title>Voyager Desktop</title>

  <section id="dov.vd.g">

    <title>General</title>

    <section id="dov.vd.g.i">

      <title>Introduction</title>

      <para>The desktop follows a document-centered approach in 
      contrast to other task-driven implementations. This means the 
      user is working with documents to be found on the system rather 
      then starting some kind of application and working inside of 
      that. For example to modify a text document the user just clicks 
      the document and doesn&apos;t have to care which application is 
      able to handle that kind of document because the system will find 
      an appropriate one. In task-driven environments the user first 
      starts an application, for example a word processor, and opens 
      documents from inside the application using a file selection 
      dialog.</para>

      <para>All documents, files, etc. that the user interacts with are 
      objects because the desktop is based on an object model described 
      elsewhere in this document. This means the desktop is fully 
      object-orientated with all the benefits coming from that. So 
      it&apos;s possible to have data encapsulated in the objects and 
      subclassing of document or file classes is not even allowed but 
      encouraged by the underlying system.</para>

    </section>

	<section id="dov.vd.g.co">
		
		<title>Classes and Objects</title>
		
		<para>The user of the desktop is dealing with objects. Files for example are not
			classic files like on other systems but real objects in the sense that they might
			carry additional information which is encapsulated and come with object
			methods to work with them. For example one doesn&apos;t copy a file by using a
			filemanager or the desktop application and calling some <function>
			copy()</function> API of the operating system. Instead a method on the file
			object is invoked and the file object handles the copying by itself.</para>
		
		<para>Every object is an instance of a class which is registered with the desktop.
			Classes may be registered and de-registered at any time (a restart of the desktop
			may be necessary). They are implemented as shared libraries and link
			dynamically to the desktop. By basing the whole desktop on an object model which
			allows subclassing and class replacement without recompiling it&apos;s
			possible for independent developers to create new classes without access to the
			desktop source code. In fact developers are encouraged not to modify sources to
			extend the desktop but to create new classes to add functions to the desktop. By
			replacing classes with new versions overriding inherited methods it&apos;s
			possible to modify the behaviour of any class of the desktop.</para>
		
		<para>The root class of the whole desktop is <classname>SOMObject</classname>
			which is also the root class of the underlying object system (see picture below).
			<classname>WPObject</classname> implements basic desktop methods like
			menus or property notebooks. Derived from the basic desktop class is the
			filesystem class for objects representing files or folders. A subtree handles
			all types of folders which isn&apos;t covered here. All kinds of files live on the
			left part of the tree. A basic datafile class
			<classname>WPDataFile</classname> implements methods common to all files
			like querying the filesize or getting the date of creation. A subtree starting
			with <classname>MMAudio</classname> implements audio multimedia files
			while a class <classname>MMVideo</classname> handles digital video files.
			The <classname>WPDataFileExt</classname> class will be covered
			later.</para>
		
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/subclassing.pdf" format="PDF"/>
			</imageobject>
			<imageobject>
				<imagedata fileref="images/subclassing.png" format="PNG"/>
			</imageobject>
			<textobject> <phrase>Subclassing</phrase>
			</textobject>
			<caption>
				<para>Some blabla text for it.</para>
			</caption> 
		</mediaobject>
		
		<para>The benefits of using such a class tree in the desktop are easily spotted. The
			<classname>MMAudio</classname> class implements basic features like
			playing audio files or displaying audio information like the playtime of the
			file in question using operating system features. It may also provide a method
			for accessing tags in the audio file containing the artists name or the
			trackname. One may implement the latter by adding code to handle ID3 tags of MP3
			files and code to handle the same for OGG files. In the end,
			<classname>MMAudio</classname> would contain code for every tag format
			known. If a developer ever came up with a new audio codec and a different tag
			architecture, the maintainer of the desktop or the
			<classname>MMAudio</classname> class had to be asked to add additional
			parsing code. Even after the code addition users can&apos;t immediately
			benefit from it because the next release may only be available at some point in the
			future.</para>
		
		<section id="dov.vd.g.s">
			
			<title>Subclassing</title>
			
			<para>Using derived classes said developer may just create a new class which
				inherits everything from <classname>MMAudio</classname> but overrides
				the method which deals with tag parsing to implement the new parser. Using a
				binary compatible object system this class can be added without
				recompiling the desktop. Even more the developer doesn&apos;t need the
				desktop sources at all and doesn&apos;t have to care about the rest of the
				class hierarchy or changes to <classname>MMAudio</classname> made by
				others (as long as the others don&apos;t break the class by changing the
				binary interface by purpose). Users may install the new class without
				changing anything of their current system and may immediately use the new
				features implemented by the class seamlessly. So instead of adding more and
				more code to <classname>MMAudio</classname> it&apos;s better to move
				specialized code like tag parsing to specialized classes as done in the
				example with <classname>MMMp3</classname> and
				<classname>MMOgg</classname>. This also helps to keep the source
				maintainable because possible execution path are clear and well
				contained.</para>
			
		</section>
		
		<section id="dov.vd.g.cr">
			
			<title>Class Replacement</title>
			
			<para>FIXME</para>
			
		</section>
		
	</section>

    <section id="dov.vd.g.fv">

      <title>Folder Views</title>

      <para>Each folder object opens in its own window (spatial view). 
      The characteristics of this window like size, position, used font 
      are saved in the instance data of the folder object. This means 
      the window reopens exactly the way the user left it before.</para>

      <para>Three different kind of views are supported:</para>

      <variablelist>

        <varlistentry>

          <term><emphasis>Icon View</emphasis></term>

          <listitem>

            <para>All objects are shown with an icon and a name</para>

          </listitem>

        </varlistentry>

        <varlistentry>

          <term><emphasis>Details View</emphasis></term>

          <listitem>

            <para>Objects are shown in a list with each row containing 
            the icon, the name, and details about the object in 
            question like filesize or creation date.</para>

          </listitem>

        </varlistentry>

        <varlistentry>

          <term><emphasis>Tree View</emphasis></term>

          <listitem>

            <para>A tree of the folder and the subfolder is shown. 
            Single objects are not shown in this view. If any of the 
            subfolders contains additional folders this is depicted by 
            a plus sign next to it. Clicking on this plus shows the 
            subfolder tree.</para>

          </listitem>

        </varlistentry>

      </variablelist>

      <para><emphasis>Browser View</emphasis> is not supported because 
      this kind of traversing the filesystem breaks the object metaphor 
      of the desktop. Changing the folder one is in has to also change 
      position, size, and shape of the browser window because in the 
      object world the view should represent the underlying object. Not 
      taking into account the object settings confuses the user because 
      he can&apos;t rely on a consistant behaviour of folder views with 
      respect to the folders window settings.</para>

    </section>

    <section id="dov.vd.g.t">

      <title>Templates</title>

      <para>New documents, files, or other objects are created by 
      dragging an object template somewhere into the filesystem. 
      Templates normally are located in the central Templates folder 
      but may also be created in other places. Beside the system or 
      application provided templates the user may create his own 
      templates. This is done by checking the Templates checkbox in the 
      settings of an object.</para>

      <note>

        <para>Voyager-desktop-compliant applications handling documents 
        should create the appropriate templates for the user.</para>

      </note>

      <para />

    </section>

  </section>

  <section id="dov.vd.i">

    <title>Implementation</title>

    <para>This Chapter describes the implementation of the desktop. 
    It&apos;s a technical document intended merely for 
    developers.</para>

    <section id="dov.vd.i.mm">

      <title>Memory Management</title>

      <para>Using <function>wpAllocMem()</function> and <function>
      wpFreeMem()</function> allocated memory is tracked in an inuse 
      list. Whenever an object is deleted or goes dormant this list is 
      scanned by the system and memory still allocated will be freed 
      automatically. Nevertheless memory not in use anymore should be 
      freed by the programmer as usual because the desktop does not 
      include a garbage collector. The inuse list should be considered 
      as a kind of safety net.</para>

      <warning>

        <para>While the usual memory function like <function>
        malloc()</function>, <function>g_alloc()</function>, <function>
        SOMMAlloc()</function> are available to desktop developers it 
        is strongly adviced to only use <function>
        wpAllocMem()</function> and <function>
        wpFreeMem()</function>.</para>

      </warning>

      <orderedlist numeration="loweralpha">

        <listitem>

          <bridgehead>Memory allocation with <function>
          wpAllocMem()</function></bridgehead>
          <para>A programmer asks for memory using</para>

          <funcsynopsis><funcprototype><funcdef>int <function>
          wpAllocMem</function></funcdef><paramdef>WPObject <parameter>
          somSelf</parameter></paramdef><paramdef>ULONG <parameter>
          cbBytes</parameter></paramdef><paramdef>
          <parameter>...</parameter></paramdef></funcprototype></funcsynopsis>
          <para>This method is introduced by the 
          <classname>WPObject</classname> class.</para>

          <para><function>wpAllocMem()</function> does the 
          following:</para>

          <itemizedlist>

            <listitem>Call <function>SOMCalloc()</function>to allocate 
            a memory block of size cbBytes+sizeof(USEITEM)+sizeof 
            (MEMORYITEM)</listitem>

            <listitem>Fill information area of the USEITEM part of the 
            memory block</listitem>

            <listitem>Fill information area of the MEMORYITEM part of 
            the memory block</listitem>

            <listitem>Call <function>wpAddToObjUseList(somSelf, 
            ...)</function>to add the item to the objects inuse 
            list</listitem>

            <listitem>Return a pointer to the memory block following 
            USEITEM and MEMORYITEM to the caller</listitem>

          </itemizedlist>

          <para>The layout of the memory is like this.</para>

          <para>To ensure the desktop is thread safe each object has a 
          semaphor to serialize access to critical object instance 
          variables. The inuse list is such a critical resource so 
          <function>wpAddToObjUseList()</function> tries to aquire the 
          objects semaphor using <function>
          wpRequestObjectSem()</function>.</para>

          <warning>

            <para>Calling <function>wpAllocMem()</function> while 
            holding the object semaphor will cause a deadlock.</para>

          </warning>

        </listitem>

        <listitem>

          <bridgehead>Freeing memory with <function>
          wpFreeMem()</function></bridgehead>
          <para>Memory is freed using <synopsis>
          wpFreeMem()</synopsis></para>

          <para>This method introduced by 
          <classname>WPObject</classname> takes the memory pointer and 
          travels back to the USEITEM part of the allocated memory 
          block (see the section about memory allocation). Using a 
          pointer to the USEITEM the memory is removed from the objects 
          inuse list using <function>
          wpDeleteFromObjUseList()</function>.</para>

          <para>Be aware that this method tries to aquire the object 
          semaphor so a deadlock may occur when the semaphor is already 
          held.</para>

          <warning>

            <para>Calling <function>wpFreeMem()</function> while 
            holding the object semaphor will cause a deadlock.</para>

          </warning>

          <para>After removing the item from the inuse list a call to 
          <function>SOMFree()</function> deallocates the memory 
          block.</para>

        </listitem>

      </orderedlist>

    </section>

  </section>

</chapter>

