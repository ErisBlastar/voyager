#! sh

# orbit-idl-2 - temporary wrapper script for .libs/orbit-idl-2.exe
# Generated by ltmain.sh - GNU libtool 1.5.18 (1.1220.2.245 2005/05/16 08:55:27)
#
# The orbit-idl-2 program cannot be directly executed until all the libtool
# libraries that it depends on are installed.
#
# This wrapper script should never be moved out of the build directory.
# If it is, it will not operate correctly.

# Sed substitution that helps us do robust quoting.  It backslashifies
# metacharacters that are still active within double-quoted strings.
Xsed='Z:/BIN/sed.exe -e 1s/^X//'
sed_quote_subst='s/\([\\`\\"$\\\\]\)/\\\1/g'

# The HP-UX ksh and POSIX shell print the target directory to stdout
# if CDPATH is set.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH

relink_command="(cd L:/orbit2-2.14.0/src/idl-compiler; LIBRARY_PATH=\"L:/usr/lib/gcc-lib/i386-pc-os2-emx/3.3.5;L:/usr/lib;z:/lib;r:/emx/lib;f:/emx/lib;\"; export LIBRARY_PATH; { test -z \"\${COMPILER_PATH+set}\" || unset COMPILER_PATH || { COMPILER_PATH=; export COMPILER_PATH; }; }; { test -z \"\${GCC_EXEC_PREFIX+set}\" || unset GCC_EXEC_PREFIX || { GCC_EXEC_PREFIX=; export GCC_EXEC_PREFIX; }; }; PATH=\"L:\\\\usr\\\\i386-pc-os2-emx\\\\bin;L:\\\\usr\\\\bin;D:\\\\IBMLAN\\\\NETPROG;D:\\\\IBMGSK50\\\\BIN;D:\\\\IBMGSK40\\\\BIN;D:\\\\IBMGSK\\\\BIN;D:\\\\MPTN\\\\BIN;D:\\\\TCPIP\\\\BIN;D:\\\\IBMCOM;.;Z:\\\\BIN;R:\\\\IBMCPP\\\\BIN;R:\\\\EMX\\\\BIN;F:\\\\EMX\\\\BIN;F:\\\\IBMCPP\\\\BIN;D:\\\\MUGLIB;D:\\\\PROGRAMS\\\\NETSCAPE\\\\PROGRAM;D:\\\\ECS\\\\BIN;D:\\\\OS2;D:\\\\OS2\\\\SYSTEM;D:\\\\OS2\\\\MDOS\\\\WINOS2;D:\\\\OS2\\\\INSTALL;D:\\\\;D:\\\\OS2\\\\MDOS;D:\\\\OS2\\\\APPS;D:\\\\EMX\\\\BIN;D:\\\\JAVA11\\\\BIN;D:\\\\PROGRAMS\\\\RSJCD;D:\\\\MMOS2\\\\FREEDB;D:\\\\MMOS2;D:\\\\MMOS2\\\\MMPLAYER;D:\\\\ODIN\\\\SYSTEM32;l:\\\\emacs\\\\20.6\\\\bin;\"; export PATH; gcc -Werror-implicit-function-declaration -std=gnu89 -D__EMX__ -DOS2 -D__ST_MT_ERRNO__ -O2 -Zexe -Zmap -D__ST_MT_ERRNO__ -s -o \$progdir/\$file orbit-idl-main.o orbit-idl-driver.o orbit-idl-backend.o orbit-idl-utils.o orbit-idl-c-backend.o orbit-idl-c-stubs.o orbit-idl-c-skels.o orbit-idl-c-headers.o orbit-idl-c-common.o orbit-idl-c-imodule.o orbit-idl-c-skelimpl.o orbit-idl-c-utils.o orbit-idl-c-typecode.o orbit-idl-c-deps.o  -L/usr/local/lib L:/usr/lib//.libs/IDL-2.a /usr/lib/.libs/intl.a /usr/lib/gobject-2.0.a /usr/lib/gmodule-2.0.a /usr/lib/glib-2.0.a L:/usr/lib//.libs/intl.a -liconv_s -lshm -lemxfix -lsocket -lgcc L:/usr/lib//popt.a -lm -L/usr/lib/.libs -LL:/usr/lib//.libs)"

# This environment variable determines our operation mode.
if test "$libtool_install_magic" = "%%%MAGIC variable%%%"; then
  # install mode needs the following variable:
  notinst_deplibs=' /usr/lib/libintl.la L:/usr/lib//libintl.la L:/usr/lib//libintl.la'
else
  # When we are sourced in execute mode, $file and $echo are already set.
  if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
    echo="echo"
    file="$0"
    # Make sure echo works.
    if test "X$1" = X--no-reexec; then
      # Discard the --no-reexec flag, and continue.
      shift
    elif test "X`($echo '\t') 2>/dev/null`" = 'X\t'; then
      # Yippee, $echo works!
      :
    else
      # Restart under the correct shell, and then maybe $echo will work.
      exec sh "$0" --no-reexec ${1+"$@"}
    fi
  fi

  # Find the directory that this script lives in.
  thisdir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`
  test "x$thisdir" = "x$file" && thisdir=.

  # Follow symbolic links until we get to the real thisdir.
  file=`ls -ld "$file" | Z:/BIN/sed.exe -n 's/.*-> //p'`
  while test -n "$file"; do
    destdir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`

    # If there was a directory component, then change thisdir.
    if test "x$destdir" != "x$file"; then
      case "$destdir" in
      [\\/]* | [A-Za-z]:[\\/]*) thisdir="$destdir" ;;
      *) thisdir="$thisdir/$destdir" ;;
      esac
    fi

    file=`$echo "X$file" | $Xsed -e 's%^.*/%%'`
    file=`ls -ld "$thisdir/$file" | Z:/BIN/sed.exe -n 's/.*-> //p'`
  done

  # Try to get the absolute directory name.
  absdir=`cd "$thisdir" && pwd`
  test -n "$absdir" && thisdir="$absdir"

  program=lt-'orbit-idl-2.exe'
  progdir="$thisdir/.libs"

  if test ! -f "$progdir/$program" || \
     { file=`ls -1dt "$progdir/$program" "$progdir/../$program" 2>/dev/null | Z:/BIN/sed.exe 1q`; \
       test "X$file" != "X$progdir/$program"; }; then

    file="$$-$program"

    if test ! -d "$progdir"; then
      mkdir "$progdir"
    else
      rm -f "$progdir/$file"
    fi

    # relink executable if necessary
    if test -n "$relink_command"; then
      if relink_command_output=`eval $relink_command 2>&1`; then :
      else
	echo "$relink_command_output" >&2
	rm -f "$progdir/$file"
	exit 1
      fi
    fi

    mv -f "$progdir/$file" "$progdir/$program" 2>/dev/null ||
    { rm -f "$progdir/$program";
      mv -f "$progdir/$file" "$progdir/$program"; }
    rm -f "$progdir/$file"
  fi

  if test -f "$progdir/$program"; then
    # Add the dll search path components to the executable PATH
    PATH=:/usr/local/lib:/usr/lib/.libs:L:/usr/lib//.libs:$PATH

    if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
      # Run the actual program with our arguments.

      exec $progdir\\$program ${1+"$@"}

      $echo "$0: cannot exec $program ${1+"$@"}"
      exit 1
    fi
  else
    # The program doesn't exist.
    $echo "$0: error: $progdir/$program does not exist" 1>&2
    $echo "This script is just a wrapper for $program." 1>&2
    echo "See the libtool documentation for more information." 1>&2
    exit 1
  fi
fi
